# -*- coding: utf-8 -*-
"""PLOTS GRAPHS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Kr-X5e3ka_eRtUpvWONo44BVlEhVyB5
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

b=pd.read_csv("/content/bank csv.csv")

b.head()

print(b.isnull().sum())
print(b.dropna)
print(b.shape)
print(b["loan"].value_counts())

print(b.duplicated().sum())
print(b.info())
print(b.count())

# print(b.column())
print(b.tail())
print(b.describe())

b.value_counts()

b.dtypes

"""# **HIST PLOT**"""

b.hist()

"""# **PAIR PLOT**"""

# prompt: BUILD PAIR PLOT

sns.pairplot(b)
plt.show()

"""# **LINE PLOT**"""



# Example 1: Line plot of 'balance' over 'age'
plt.figure(figsize=(10, 6))
sns.lineplot(x='age', y='loan', data=b)
plt.title('loan vs. Age')
plt.xlabel('Age')
plt.ylabel('loan')
plt.show()

"""# BARPLOT"""

sns.set(style="whitegrid")
plt.figure(figsize=(10,5))
sns.barplot(x="loan",y="age",data=b,palette=sns.color_palette("cubehelix"))
plt.xticks(rotation=90)
plt.title("age vs loan")
plt.ylabel("loan")
plt.xlabel("age")

"""# **HORIZONTAL BARPLOT**"""

# prompt: build a barhorizontal plot

plt.figure(figsize=(10, 6))
sns.barplot(x='loan', y='age', data=b, palette=sns.color_palette("cubehelix"), orient='h')
plt.title('Age vs. Loan (Horizontal Bar Plot)')
plt.xlabel('Age')
plt.ylabel('Loan')
plt.show()

"""# **BARPLOT**"""

sns.set(style="whitegrid")
plt.figure(figsize=(10,5))
sns.barplot(x="job",y="age",data=b,palette=sns.color_palette("cubehelix"))
plt.xticks(rotation=60)
plt.title("age vs job")
plt.ylabel("job")
plt.xlabel("age")

"""# **HISTPLOT**"""

# Example 2: Histogram of 'age'
plt.figure(figsize=(8, 5))
sns.histplot(b['age'], kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""# **PIEPLOT**"""

loan_counts = b['loan'].value_counts()
label=["no","yes","unknown"]
plt.figure(figsize=(8, 8))
plt.pie(loan_counts, labels=label, autopct='%1.1f%%', startangle=90)
plt.title('Proportion of Loan Status')
plt.show()

loan_counts = b['loan'].value_counts()
label=["no","yes","unknown"]
explode=[0.1,0.2,0.1]
plt.figure(figsize=(8, 8))
plt.pie(loan_counts, labels=label,explode=explode,autopct='%1.1f%%', startangle=90,shadow=True)
plt.title('Proportion of Loan Status')
plt.show()

f,ax=plt.subplots(1,2,figsize=(18,8))
b['loan'].value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)
ax[0].set_title('% Showed')
ax[0].set_ylabel('')
sns.countplot(x='loan', order = b['loan'].value_counts().index, data=b,ax=ax[1])
ax[1].set_title('People loan')
plt.show()

"""# **COUNTPLOT**"""

# Example 3: Bar plot of 'job' counts
plt.figure(figsize=(12, 6))
sns.countplot(x='job', data=b,color="magenta")
plt.title('Job Distribution')
plt.xlabel('Job',fontname="serif",fontweight="bold")
plt.ylabel('Count',fontname="serif",fontweight="bold")
plt.xticks(rotation=45, ha='right') # Rotate x-axis labels for better readability
plt.show()

"""# **BOXPLOT**"""

# Example 4: Box plot of 'balance' by 'marital' status
plt.figure(figsize=(8, 6))
sns.boxplot(x='marital', y='age', data=b,palette="viridis",color="hotpink",width=.5)
plt.title('Balance Distribution by Marital Status',fontsize="medium",fontweight="bold",fontname="fantasy")
plt.xlabel('Marital Status',fontweight="bold",fontname="serif")
plt.ylabel('Balance',fontweight="bold",fontname="fantasy")
plt.show()

"""# **SCATTER PLOT**"""

# Example 5: Scatter plot of 'age' vs. 'balance'
plt.figure(figsize=(10, 6))
sns.scatterplot(x='age', y='loan', data=b, hue='loan',palette="viridis",marker="s") # Added hue for loan status
plt.title('Age vs. Balance')
plt.xlabel('Age')
plt.ylabel('Balance')
plt.show()

"""# **VILION PLOT**"""

# prompt: build vilonplot

# Example 6: Violin plot of 'balance' by 'education'
plt.figure(figsize=(10, 6))
sns.violinplot(x='education', y='age', data=b)
plt.title('Balance Distribution by Education')
plt.xlabel('Education')
plt.ylabel('Balance')
plt.show()

"""# **DISTPLOT**"""

plt.figure(figsize=(8, 6))
sns.displot(b['age'], kde=True)  # Using displot for more flexibility
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Density') # Changed ylabel to Density for displot
plt.show()



"""# **LABEL ENCODER**"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
col=b.select_dtypes(include=["object"]).columns
for i in col:
  b[i]=le.fit_transform(b[i])
b.head()

"""# **CORRELATION**"""

sns.heatmap(b.corr(),annot=True)